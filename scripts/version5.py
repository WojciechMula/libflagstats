#!/usr/bin/env python3
from avx512 import *

AVX512_BIT12_FQCFAIL_0          = 5
AVX512_BIT12_FQCFAIL_1          = 13
AVX512_BIT13_FQCFAIL_0          = 4
AVX512_BIT13_FQCFAIL_1          = 12
AVX512_BIT14_FQCFAIL_0          = 3
AVX512_BIT14_FQCFAIL_1          = 11
AVX512_FREAD1_FQCFAIL_0         = 7
AVX512_FREAD2_FQCFAIL_0         = 15
AVX512_FREAD1_FQCFAIL_1         = 6
AVX512_FREAD2_FQCFAIL_1         = 14
AVX512_FSECONDARY_FQCFAIL_0     = 0
AVX512_FSECONDARY_FQCFAIL_1     = 8
AVX512_FDUP_FQCFAIL_0           = 1
AVX512_FDUP_FQCFAIL_1           = 9
AVX512_FSUPPLEMENTARY_FQCFAIL_0 = 2
AVX512_FSUPPLEMENTARY_FQCFAIL_1 = 10
AVX512_FQCFAIL = 15

def bit12(FPAIRED, FPROPER_PAIR, FUNMAP, FMUNMAP):
    return FPAIRED & (~FUNMAP) & FPROPER_PAIR

def bit13(FPAIRED, FPROPER_PAIR, FUNMAP, FMUNMAP):
    return FPAIRED & (~FUNMAP) & FMUNMAP

def bit14(FPAIRED, FPROPER_PAIR, FUNMAP, FMUNMAP):
    return FPAIRED & (~FUNMAP) & (~FMUNMAP)

def bit(pos):
    return 1 << pos


def complete_bits_lookup():
    vpshufw = []
    for k in range(2**5):
        FPAIRED      = int(k & 0x01 != 0)
        FPROPER_PAIR = int(k & 0x02 != 0)
        FUNMAP       = int(k & 0x04 != 0)
        FMUNMAP      = int(k & 0x08 != 0)

        b12 = bit12(FPAIRED, FPROPER_PAIR, FUNMAP, FMUNMAP) & 0x01
        b13 = bit13(FPAIRED, FPROPER_PAIR, FUNMAP, FMUNMAP) & 0x01
        b14 = bit14(FPAIRED, FPROPER_PAIR, FUNMAP, FMUNMAP) & 0x01

        word = (b12 << AVX512_BIT12_FQCFAIL_0) \
             | (b12 << AVX512_BIT12_FQCFAIL_1) \
             | (b13 << AVX512_BIT13_FQCFAIL_0) \
             | (b13 << AVX512_BIT13_FQCFAIL_1) \
             | (b14 << AVX512_BIT14_FQCFAIL_0) \
             | (b14 << AVX512_BIT14_FQCFAIL_1) \
             | (FPAIRED << 12)

        vpshufw.append(word)

    return word2byte_array(vpshufw)


def condition_mask_lookup():
    def get_mask(FSUPPLEMENTARY, FSECONDARY, FPAIRED):
        mask = 0
        mask |= bit(AVX512_FDUP_FQCFAIL_0) | bit(AVX512_FDUP_FQCFAIL_1)

        if FSECONDARY:
            mask |= bit(AVX512_FSECONDARY_FQCFAIL_0) | bit(AVX512_FSECONDARY_FQCFAIL_1)
        elif FSUPPLEMENTARY:
            mask |= bit(AVX512_FSUPPLEMENTARY_FQCFAIL_0) | bit(AVX512_FSUPPLEMENTARY_FQCFAIL_1)
        elif FPAIRED:
            mask |= bit(AVX512_BIT12_FQCFAIL_0) | bit(AVX512_BIT12_FQCFAIL_1)
            mask |= bit(AVX512_BIT13_FQCFAIL_0) | bit(AVX512_BIT13_FQCFAIL_1)
            mask |= bit(AVX512_BIT14_FQCFAIL_0) | bit(AVX512_BIT14_FQCFAIL_1)
            mask |= bit(AVX512_FREAD1_FQCFAIL_0) | bit(AVX512_FREAD1_FQCFAIL_1)
            mask |= bit(AVX512_FREAD2_FQCFAIL_0) | bit(AVX512_FREAD2_FQCFAIL_1)

        return mask

    vpshufw = []
    for k in range(2**5):
        FSECONDARY     = int(k & 0x01 != 0)
        FQCFAIL        = int(k & 0x02 != 0)
        FDUP           = int(k & 0x04 != 0)
        FSUPPLEMENTARY = int(k & 0x08 != 0)
        FPAIRED        = int(k & 0x10 != 0)

        vpshufw.append(get_mask(FSUPPLEMENTARY, FSECONDARY, FPAIRED))

    return word2byte_array(vpshufw)


def reshuffle_bits_lookup():
    def get_word(FSUPPLEMENTARY, FDUP, FSECONDARY, FQCFAIL):
        mask = 0

        if FSUPPLEMENTARY:
            mask |= bit(AVX512_FSUPPLEMENTARY_FQCFAIL_0)

        if FDUP:
            mask |= bit(AVX512_FDUP_FQCFAIL_0)

        if FSECONDARY:
            mask |= bit(AVX512_FSECONDARY_FQCFAIL_0)

        if FQCFAIL:
            mask |= bit(AVX512_FQCFAIL)

        return mask

    vpshufw = []
    for k in range(2**5):
        FSECONDARY     = int(k & 0x01 != 0)
        FQCFAIL        = int(k & 0x02 != 0)
        FDUP           = int(k & 0x04 != 0)
        FSUPPLEMENTARY = int(k & 0x08 != 0)
        FPAIRED        = int(k & 0x10 != 0)

        vpshufw.append(get_word(FSUPPLEMENTARY, FDUP, FSECONDARY, FQCFAIL))

    return word2byte_array(vpshufw)

print("    // generated by scripts/version5.py")
print(avx512_var("complete_bits_lookup", complete_bits_lookup()))
print()
print(avx512_var("reshuffle_bits_lookup", reshuffle_bits_lookup()))
print()
print(avx512_var("condition_mask_lookup", condition_mask_lookup()))
print("    // end of autogenered content")
